import {
  connect
} from 'react-redux';

import {
  Authentication
} from '../libraries/Authentication';
import {
  userRenewToken,
  USER_RENEW_TOKEN_SUCCESS,
  USER_RENEW_TOKEN_FAILURE,
} from '../actions/user/RenewTokenAction';
import {
  fetchUserProfile,
  FETCH_USER_PROFILE_SUCCESS,
  FETCH_USER_PROFILE_FAILURE,
} from '../actions/user/ProfileAction';
import {
  USER_LOGOUT_SUCCESS,
} from '../actions/user/LogoutAction';
import AppComponent from '../components/AppComponent';

const mapDispatchToProps = (dispatch) => {
  const _logoutResolver = (resolve) => {
    let _promise = {
      type: USER_LOGOUT_SUCCESS,
      message: USER_LOGOUT_SUCCESS,
      payload: [],
    };

    resolve(_promise);
  };

  return {
    renewToken: () => new Promise((resolve, reject) => {
      // if there is no token, dont bother
      if (!Authentication.loggedIn()) {
        _logoutResolver(resolve);
      } else {
        let _promise;
        // fetch user from token (if server deems it's valid token)
        dispatch(userRenewToken({
          token: Authentication.getToken(),
        })).then(response => {
          let data = response.payload.data;

          if (data.status) {
            // reset token (possibly new token that was regenerated by the server)
            Authentication.setToken(data.data.token);

            // let other components know of error by updating the redux` state
            _promise = {
              type: USER_RENEW_TOKEN_SUCCESS,
              payload: response.payload,
              message: USER_RENEW_TOKEN_SUCCESS,
            };

            dispatch(_promise);
          } else {
            // remove token from storage
            Authentication.removeToken();

            // let other components know of error by updating the redux` state
            _promise = {
              type: USER_RENEW_TOKEN_FAILURE,
              payload: response.payload,
              message: USER_RENEW_TOKEN_FAILURE,
            };

            dispatch(_promise);
          }
        });
      }
    }),
    fetchUserProfile: (params) => new Promise((resolve, reject) => {
      // if there is no token, dont bother
      if (!Authentication.loggedIn()) {
        _logoutResolver(resolve);
      } else {
        let _promise;
        dispatch(fetchUserProfile(params)).then(response => {
          let data = response.payload.data;

          // if any one of these exist, then there is a field error
          if (!data.status) {
            // let other components know of error by updating the redux` state
            _promise = {
              type: FETCH_USER_PROFILE_FAILURE,
              payload: response.payload,
              message: FETCH_USER_PROFILE_FAILURE,
            };

            dispatch(_promise);
            reject({
              ..._promise,
              payload: response.payload.data,
            });
          } else {
            // let other components know that we got user and things are fine by updating the redux` state
            _promise = {
              type: FETCH_USER_PROFILE_SUCCESS,
              payload: response.payload,
              message: FETCH_USER_PROFILE_SUCCESS,
            };

            dispatch(_promise);
            resolve({
              ..._promise,
              payload: response.payload.data,
            });
          }
        });
      }
    }),
  }
};

const mapStateToProps = (state) => {
  return {
    user: state.user,
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AppComponent);
